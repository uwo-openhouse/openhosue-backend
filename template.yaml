AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  openhouse-backend

  Backend SAM & Infrastructure

Globals:
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"
    Auth:
      Authorizers:
        CognitoAuthorizer:
          AuthType: COGNITO_USER_POOLS
          UserPoolArn: !GetAtt AdminPool.Arn
          Identity:
            Header: Authorization

  Function:
    Timeout: 3
    Runtime: nodejs12.x

Resources:
  # Lambda Functions & API Events

  BuildingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: buildings/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref BuildingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BuildingsTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /buildings
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /buildings
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /buildings/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /buildings/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
    DependsOn: BuildingsTable

  AreasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: areas/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref AreasTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AreasTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /areas
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /areas
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /areas/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /areas/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
    DependsOn: AreasTable

  OpenHousesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: openhouses/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref OpenHousesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OpenHousesTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /openhouses
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /openhouses
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /openhouses/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /openhouses/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
    DependsOn: OpenHousesTable

  EventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events/
      Handler: index.handler
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsTable
          OPEN_HOUSES_TABLE: !Ref OpenHousesTable
          AREAS_TABLE: !Ref AreasTable
          BUILDINGS_TABLE: !Ref BuildingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
        - DynamoDBReadPolicy:
            TableName: !Ref OpenHousesTable
        - DynamoDBReadPolicy:
            TableName: !Ref AreasTable
        - DynamoDBReadPolicy:
            TableName: !Ref BuildingsTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /events
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /events
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /events/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /events/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
    DependsOn:
      - EventsTable
      - OpenHousesTable
      - AreasTable
      - BuildingsTable

  # DynamoDB Tables

  BuildingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Buildings
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AreasTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Areas
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OpenHousesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-OpenHouses
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Events
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito resources for admin authorization & UI

  AdminPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OpenHouse-AdminPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  AdminPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminPool
      ClientName: OpenHouse-AdminPoolClient
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://frontend-app-todo.com/ # TODO: Replace with Admin UI
      LogoutURLs:
        - https://frontend-app-todo.com/login # TODO: Replace with Admin UI
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - uwo-openhouse-api/areas:manage
        - uwo-openhouse-api/buildings:manage
        - uwo-openhouse-api/events:manage
        - uwo-openhouse-api/openhouses:manage
      GenerateSecret: false

  AdminPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: uwo-openhouse-api
      Name: Open House
      Scopes:
        - ScopeName: "areas:manage"
          ScopeDescription: "Management of areas resource"
        - ScopeName: "buildings:manage"
          ScopeDescription: "Management of buildings resource"
        - ScopeName: "events:manage"
          ScopeDescription: "Management of events resource"
        - ScopeName: "openhouses:manage"
          ScopeDescription: "Management of open houses resource"
      UserPoolId: !Ref AdminPool

  AdminPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: uwo-openhouse
      UserPoolId: !Ref AdminPool

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  AdminUIDomain:
    Description: "Admin UI Sign In Domain"
    Value: !Sub
      - "https://${Domain}.auth.${AWS::Region}.amazoncognito.com/"
      - Domain: !Ref AdminPoolDomain
