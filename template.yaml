AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  openhouse-backend

  Backend SAM & Infrastructure

Parameters:
  AdminUILoginDomain:
    Type: String
  LoginCallbackURL:
    Type: String
  LogoutRedirectURL:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"
    Auth:
      Authorizers:
        CognitoAuthorizer:
          AuthType: COGNITO_USER_POOLS
          UserPoolArn: !GetAtt AdminPool.Arn
          Identity:
            Header: Authorization

  Function:
    Timeout: 10
    Runtime: nodejs12.x
    Environment:
      Variables:
        ENDPOINT_OVERRIDE: ""

Resources:
  # Lambda Functions & API Events

  BuildingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/buildings/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref BuildingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BuildingsTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /buildings
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /buildings
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /buildings/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /buildings/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/buildings:manage
    DependsOn: BuildingsTable

  AreasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/areas/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref AreasTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AreasTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /areas
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /areas
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /areas/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /areas/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/areas:manage
    DependsOn: AreasTable

  OpenHousesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/openhouses/
      Handler: index.handler
      Environment:
        Variables:
          OPEN_HOUSES_TABLE: !Ref OpenHousesTable
          OPEN_HOUSE_ATTENDEES_TABLE: !Ref OpenHouseAttendeesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OpenHousesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref OpenHouseAttendeesTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /openhouses
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /openhouses
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /openhouses/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /openhouses/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/openhouses:manage
    DependsOn:
      - OpenHousesTable
      - OpenHouseAttendeesTable

  OpenHouseAttendeesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/openhouse-attendees/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref OpenHouseAttendeesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OpenHouseAttendeesTable
      Events:
        GatewayPost:
          Type: Api
          Properties:
            Path: /openhouses/{uuid}/attendees
            Method: POST
    DependsOn:
      - OpenHouseAttendeesTable

  EateriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/eateries/
      Handler: index.handler
      Environment:
        Variables:
          EATERIES_TABLE: !Ref EateriesTable
          BUILDINGS_TABLE: !Ref BuildingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EateriesTable
        - DynamoDBReadPolicy:
            TableName: !Ref BuildingsTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /eateries
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /eateries
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/eateries:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /eateries/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/eateries:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /eateries/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/eateries:manage
    DependsOn:
      - EateriesTable
      - BuildingsTable

  EventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/events/
      Handler: index.handler
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsTable
          OPEN_HOUSES_TABLE: !Ref OpenHousesTable
          AREAS_TABLE: !Ref AreasTable
          BUILDINGS_TABLE: !Ref BuildingsTable
          EVENT_ATTENDEES_TABLE: !Ref EventAttendeesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventAttendeesTable
        - DynamoDBReadPolicy:
            TableName: !Ref OpenHousesTable
        - DynamoDBReadPolicy:
            TableName: !Ref AreasTable
        - DynamoDBReadPolicy:
            TableName: !Ref BuildingsTable
      Events:
        GatewayGet:
          Type: Api
          Properties:
            Path: /events
            Method: GET
        GatewayPost:
          Type: Api
          Properties:
            Path: /events
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
        GatewayPut:
          Type: Api
          Properties:
            Path: /events/{uuid}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
        GatewayDelete:
          Type: Api
          Properties:
            Path: /events/{uuid}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - uwo-openhouse-api/events:manage
    DependsOn:
      - EventsTable
      - OpenHousesTable
      - AreasTable
      - BuildingsTable
      - EventAttendeesTable

  EventAttendeesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/event-attendees/
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref EventAttendeesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventAttendeesTable
      Events:
        GatewayPost:
          Type: Api
          Properties:
            Path: /events/{uuid}/attendees
            Method: POST
        GatewayDelete:
          Type: Api
          Properties:
            Path: /events/{uuid}/attendees
            Method: DELETE
    DependsOn:
      - EventAttendeesTable

  # DynamoDB Tables
  # Remember to update local-test/env_*.json & setup_dynamo.js when adding/updating tables

  BuildingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Buildings
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AreasTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Areas
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OpenHousesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-OpenHouses
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OpenHouseAttendeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-OpenHouseAttendees
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EateriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Eateries
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-Events
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EventAttendeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OpenHouse-EventAttendees
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S # String
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito resources for admin authorization & UI

  AdminPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OpenHouse-AdminPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  AdminPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminPool
      ClientName: OpenHouse-AdminPoolClient
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Ref LoginCallbackURL
      LogoutURLs:
        - !Ref LogoutRedirectURL
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - uwo-openhouse-api/areas:manage
        - uwo-openhouse-api/buildings:manage
        - uwo-openhouse-api/eateries:manage
        - uwo-openhouse-api/events:manage
        - uwo-openhouse-api/openhouses:manage
      GenerateSecret: false

  AdminPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: uwo-openhouse-api
      Name: Open House
      Scopes:
        - ScopeName: "areas:manage"
          ScopeDescription: "Management of areas resource"
        - ScopeName: "buildings:manage"
          ScopeDescription: "Management of buildings resource"
        - ScopeName: "eateries:manage"
          ScopeDescription: "Management of eateries resource"
        - ScopeName: "events:manage"
          ScopeDescription: "Management of events resource"
        - ScopeName: "openhouses:manage"
          ScopeDescription: "Management of open houses resource"
      UserPoolId: !Ref AdminPool

  AdminPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref AdminUILoginDomain
      UserPoolId: !Ref AdminPool

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  AdminUIDomain:
    Description: "Admin UI Sign In Domain"
    Value: !Sub
      - "https://${AdminUILoginDomain}.auth.${AWS::Region}.amazoncognito.com/"
      - Domain: !Ref AdminPoolDomain
